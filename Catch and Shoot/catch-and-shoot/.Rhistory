#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME, shotType, shotOutcome, shotGroup, shotLength)
logs <- read.csv('all-game-logs.csv')
jumplogs <- merge(jumpShotshort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
# pbpLogShort <- pbplogs %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME,
#                            shotType, shotOutcome, shotGroup, shotLength, GAME_DATE, MATCHUP, WL
#                            )
#
jumplogShort <- jumplogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
jumplogShort$HOMEAWAY <- "Away"
jumplogShort$HOMEAWAY[str_detect(jumplogShort$MATCHUP, "vs") ]<- "Home"
jumplogShort$OPPONENT <-str_sub(jumplogShort$MATCHUP,-3)
jumplogShort$DATE_OPPONENT <- paste(jumplogShort$GAME_DATE, str_sub(jumplogShort$MATCHUP,5), sep = " ")
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
write_csv(jumplogShort, "jump-log-short.csv")
write_csv(allLogShort, "all-log-short.csv")
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
efg <- read.csv('cs-over-50-fga.csv')
namesdf <- efg %>% separate(PLAYER, c("First", "Last", "Suffix"), remove = FALSE, sep = " ") %>% arrange(Last)
teamsdf <- efg %>%  arrange(TEAM)
efg$isSelected <- TRUE
shots <- read.csv("shotcharts-2018-19.csv")
# pbp <- read.csv('jumpshots-11-25.csv')
# pbp$shotType <- "2PT"
# pbp$shotType[str_detect(pbp$HOMEDESCRIPTION, "3PT") | str_detect(pbp$VISITORDESCRIPTION, "3PT")]<- '3PT'
#
# pbp$shotOutcome <- "MAKE"
# pbp$shotOutcome[str_detect(pbp$HOMEDESCRIPTION, "MISS") | str_detect(pbp$VISITORDESCRIPTION, "MISS")]<- 'MISS'
# pbp <- pbp %>% unite(shotGroup, shotType,shotOutcome, sep = "-", remove = FALSE)
# pbp <- pbp %>% unite(desc_combined, HOMEDESCRIPTION,VISITORDESCRIPTION, sep = " ", remove = FALSE)
jumpshots <- shots %>% filter(ACTION_TYPE == "Jump Shot" & SHOT_DISTANCE < 40)
# pbp <- pbp %>% filter(!str_detect(desc_combined, "Running|Fadeway|Turnaround"))
# pbp$shotLength <- str_extract( pbp$desc_combined, "\\d+(?=\\')")
jumpShotshort <- jumpshots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
# pbpshort <- pbp %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME, shotType, shotOutcome, shotGroup, shotLength)
logs <- read.csv('all-game-logs.csv')
jumplogs <- merge(jumpShotshort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
# pbpLogShort <- pbplogs %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME,
#                            shotType, shotOutcome, shotGroup, shotLength, GAME_DATE, MATCHUP, WL
#                            )
#
jumplogShort <- jumplogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
jumplogShort$HOMEAWAY <- "Away"
jumplogShort$HOMEAWAY[str_detect(jumplogShort$MATCHUP, "vs") ]<- "Home"
jumplogShort$OPPONENT <-str_sub(jumplogShort$MATCHUP,-3)
jumplogShort$DATE_OPPONENT <- paste(jumplogShort$GAME_DATE, str_sub(jumplogShort$MATCHUP,5), sep = " ")
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
write_csv(jumplogShort, "jump-log-short.csv")
write_csv(allLogShort, "all-log-short.csv")
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
efg <- read.csv('cs-over-50-fga.csv')
namesdf <- efg %>% separate(PLAYER, c("First", "Last", "Suffix"), remove = FALSE, sep = " ") %>% arrange(Last)
teamsdf <- efg %>%  arrange(TEAM)
efg$isSelected <- TRUE
shots <- read.csv("shotcharts-2018-19.csv")
# pbp <- read.csv('jumpshots-11-25.csv')
# pbp$shotType <- "2PT"
# pbp$shotType[str_detect(pbp$HOMEDESCRIPTION, "3PT") | str_detect(pbp$VISITORDESCRIPTION, "3PT")]<- '3PT'
#
# pbp$shotOutcome <- "MAKE"
# pbp$shotOutcome[str_detect(pbp$HOMEDESCRIPTION, "MISS") | str_detect(pbp$VISITORDESCRIPTION, "MISS")]<- 'MISS'
# pbp <- pbp %>% unite(shotGroup, shotType,shotOutcome, sep = "-", remove = FALSE)
# pbp <- pbp %>% unite(desc_combined, HOMEDESCRIPTION,VISITORDESCRIPTION, sep = " ", remove = FALSE)
jumpshots <- shots %>% filter(ACTION_TYPE == "Jump Shot" & SHOT_DISTANCE < 40)
# pbp <- pbp %>% filter(!str_detect(desc_combined, "Running|Fadeway|Turnaround"))
# pbp$shotLength <- str_extract( pbp$desc_combined, "\\d+(?=\\')")
jumpShotshort <- jumpshots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
# pbpshort <- pbp %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME, shotType, shotOutcome, shotGroup, shotLength)
logs <- read.csv('all-game-logs.csv')
jumplogs <- merge(jumpShotshort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
# pbpLogShort <- pbplogs %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME,
#                            shotType, shotOutcome, shotGroup, shotLength, GAME_DATE, MATCHUP, WL
#                            )
#
jumplogShort <- jumplogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
jumplogShort$HOMEAWAY <- "Away"
jumplogShort$HOMEAWAY[str_detect(jumplogShort$MATCHUP, "vs") ]<- "Home"
jumplogShort$OPPONENT <-str_sub(jumplogShort$MATCHUP,-3)
jumplogShort$DATE_OPPONENT <- paste(jumplogShort$GAME_DATE, str_sub(jumplogShort$MATCHUP,5), sep = " ")
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
write_csv(jumplogShort, "jump-log-short.csv")
write_csv(allLogShort, "all-log-short.csv")
setwd("~/Documents/data-analysis/nylon/Catch and Shoot/catch-and-shoot")
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
efg <- read.csv('cs-over-50-fga.csv')
namesdf <- efg %>% separate(PLAYER, c("First", "Last", "Suffix"), remove = FALSE, sep = " ") %>% arrange(Last)
teamsdf <- efg %>%  arrange(TEAM)
efg$isSelected <- TRUE
shots <- read.csv("shotcharts-2018-19.csv")
# pbp <- read.csv('jumpshots-11-25.csv')
# pbp$shotType <- "2PT"
# pbp$shotType[str_detect(pbp$HOMEDESCRIPTION, "3PT") | str_detect(pbp$VISITORDESCRIPTION, "3PT")]<- '3PT'
#
# pbp$shotOutcome <- "MAKE"
# pbp$shotOutcome[str_detect(pbp$HOMEDESCRIPTION, "MISS") | str_detect(pbp$VISITORDESCRIPTION, "MISS")]<- 'MISS'
# pbp <- pbp %>% unite(shotGroup, shotType,shotOutcome, sep = "-", remove = FALSE)
# pbp <- pbp %>% unite(desc_combined, HOMEDESCRIPTION,VISITORDESCRIPTION, sep = " ", remove = FALSE)
jumpshots <- shots %>% filter(ACTION_TYPE == "Jump Shot" & SHOT_DISTANCE < 40)
# pbp <- pbp %>% filter(!str_detect(desc_combined, "Running|Fadeway|Turnaround"))
# pbp$shotLength <- str_extract( pbp$desc_combined, "\\d+(?=\\')")
jumpShotshort <- jumpshots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
# pbpshort <- pbp %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME, shotType, shotOutcome, shotGroup, shotLength)
logs <- read.csv('all-game-logs.csv')
jumplogs <- merge(jumpShotshort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
# pbpLogShort <- pbplogs %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME,
#                            shotType, shotOutcome, shotGroup, shotLength, GAME_DATE, MATCHUP, WL
#                            )
#
jumplogShort <- jumplogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
jumplogShort$HOMEAWAY <- "Away"
jumplogShort$HOMEAWAY[str_detect(jumplogShort$MATCHUP, "vs") ]<- "Home"
jumplogShort$OPPONENT <-str_sub(jumplogShort$MATCHUP,-3)
jumplogShort$DATE_OPPONENT <- paste(jumplogShort$GAME_DATE, str_sub(jumplogShort$MATCHUP,5), sep = " ")
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
write_csv(jumplogShort, "jump-log-short.csv")
write_csv(allLogShort, "all-log-short.csv")
View(efg)
efg$FGM2 <- efg$FGM - efg$X3PM
efg$FGA2 <- efg$FGA - efg$X3PA
efg$FG2Percent <- efg$FGM2/ efg$FGA2
efg.pca <- prcomp(efg[,c(4:12,14:16)], center = TRUE,scale. = TRUE)
summary(efg.pca)
efg.pca <- prcomp(efg[,c(4:12,14:16)], na.action(na.omit),center = TRUE,scale. = TRUE)
efg.pca <- prcomp(efg[,c(4:12,14:16)], na.action=na.omit  ,center = TRUE,scale. = TRUE)
efg.pca <- prcomp(efg[,c(4:12,14:16)],na.action = na.omit  ,center = TRUE,scale. = TRUE)
efg[is.na(efg)] <- 0
efg.pca <- prcomp(efg[,c(4:12,14:16)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
install.packages("ggplot2")
ggbiplot(efg.pca)
library(ggbiplot)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
efg <- read.csv('cs-over-50-fga.csv')
efg$FGM2 <- efg$FGM - efg$X3PM
efg$FGA2 <- efg$FGA - efg$X3PA
efg$FG2Percent <- efg$FGM2/ efg$FGA2
efg[is.na(efg)] <- 0
efg.pca <- prcomp(efg[,c(4:12,14:16)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
library(ggbiplot)
ggbiplot(mtcars.pca)
ggbiplot(efg.pca)
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
library(ggbiplot)
efg <- read.csv('cs-over-50-fga.csv')
efg$FGM2 <- efg$FGM - efg$X3PM
efg$FGA2 <- efg$FGA - efg$X3PA
efg$FG2Percent <- efg$FGM2/ efg$FGA2
efg[is.na(efg)] <- 0
efg.pca <- prcomp(efg[,c(4:12,14:16)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca)
efg.pca <- prcomp(efg[,c(4:15)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(-efg.pca ,labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,obs.scale = scale, labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,obs.scale = -1, labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,var.scale = -1, labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca , labels = efg$PLAYER)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,ellipse = TRUE, labels = efg$PLAYER)
efg$FGA2Percent <- efg$FGA2/efg$FGA
efg.pca <- prcomp(efg[,c(4:16)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,ellipse = TRUE, labels = efg$PLAYER)
str(efg.pca)
efg.pca <- prcomp(efg[,c(4:16)]) #,center = TRUE,scale. = TRUE)
summary(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,ellipse = TRUE, labels = efg$PLAYER)
efg.pca <- prcomp(efg[,c(4:16)],center = TRUE)#,scale. = TRUE)
summary(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggbiplot(efg.pca ,ellipse = TRUE, labels = efg$PLAYER)
efg.pca <- prcomp(efg[,c(4:16)],center = TRUE, scale=.5)#,scale. = TRUE)
install.packages("factoextra")
library(factoextra)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
fviz_eig(efg.pca)
fviz_pca_ind(efg.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
efg.pca <- prcomp(efg[,c(4:16)],center = TRUE, scale=TRUE)
summary(efg.pca)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
fviz_eig(efg.pca)
fviz_pca_ind(efg.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
ggplot(efg, aes(x=FGA2Percent, y=EFG))
ggplot(efg, aes(x=FGA2Percent, y=EFG))+ geom_point()
irisCluster <- kmeans(efg[, c(16,12)], 3, nstart = 20)
irisCluster
efg$cluster<- kmeans(efg[, c(16,12)], 3, nstart = 20)
efgCluster <- kmeans(efg[, c(16,12)], 3, nstart = 20)
efgCluster$cluster <- as.factor(efgCluster$cluster)
ggplot(efg, aes(x=FGA2Percent, y=EFG, color = efgCluster$cluster)) + geom_point()
efgCluster <- kmeans(efg[, c(16,12)], 4, nstart = 20)
efgCluster$cluster <- as.factor(efgCluster$cluster)
ggplot(efg, aes(x=FGA2Percent, y=EFG, color = efgCluster$cluster)) + geom_point()
ggplot(efg, aes(x=FGA2Percent, y=EFG)#, color = efgCluster$cluster)) + geom_point()
ggplot(efg, aes(x=FGA2Percent, y=EFG) + geom_point()#, color = efgCluster$cluster)) + geom_point()
ggplot(efg, aes(x=FGA2Percent, y=EFG)) + geom_point() #, color = efgCluster$cluster)) + geom_point()
r <- kmeans(efg[, c(16,12)], 3, nstart = 20)
efgCluster$cluster <- as.factor(efgCluster$cluster)
ggplot(efg, aes(x=FGA2Percent, y=EFG, color = efgCluster$cluster)) + geom_point()
efgCluster <- kmeans(efg[, c(16,12)], 3, nstart = 20)
efgCluster$cluster <- as.factor(efgCluster$cluster)
ggplot(efg, aes(x=FGA2Percent, y=EFG, color = efgCluster$cluster)) + geom_point()
efgCluster <- kmeans(efg[, c(16,12)], 5, nstart = 20)
efgCluster$cluster <- as.factor(efgCluster$cluster)
ggplot(efg, aes(x=FGA2Percent, y=EFG, color = efgCluster$cluster)) + geom_point()
logs <- read_csv("all-log-short.csv")
View(logs)
logs <- read_csv("all-game-logs.csv")
View(logs)
wideLogs <- logs %>% reshape(idvar=c("Game_ID"), direction="wide")
wideLogs <- logs %>% reshape(idvar=c("Game_ID"), timevar = "Team_ID", direction="wide")
View(wideLogs)
df <- data.frame(row = rep(c(1, 51), each = 3),
var = c("Sepal.Length", "Species", "Species_num"),
value = c(5.1, "setosa", 1, 7.0, "versicolor", 2))
df %>% spread(var, value) %>% str
df %>% spread(var, value, convert = TRUE) %>% str
View(df)
View(df)
firsts <- logs[!duplicated(logs$Game_ID),]
logs<- logs[seq(dim(logs)[1],1),]
seconds <- logs[!duplicated(logs$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
View(wideLogs)
logs$Team <- str_sub(logs$MATCHUP,3)
logs$Team <- str_sub(logs$MATCHUP,1, 3)
View(wideLogs)
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
logs <- read_csv("all-game-logs.csv")
logs$Team <- str_sub(logs$MATCHUP,1, 3)
logsShort <- logs %>% select(-c(X1, W, L, W_PCT, MIN))
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
View(wideLogs)
wideLogs <- merge(firsts,seconds, by = c("Game_ID", "GAME_DATE","MATCHUP"))
View(wideLogs)
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
logs <- read_csv("all-game-logs.csv")
logs$Team <- str_sub(logs$MATCHUP,1, 3)
logsShort <- logs %>% select(-c(X1, W, L, W_PCT, MIN))
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = c("Game_ID", "GAME_DATE","MATCHUP"))
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
logs <- read_csv("all-game-logs.csv")
logs$Team <- str_sub(logs$MATCHUP,1, 3)
logsShort <- logs %>% select(-c(X1, W, L, W_PCT, MIN))
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
View(wideLogs)
wideLogs$DRBP.x <- wideLogs$DREB.x/ (wideLogs$FGA.y - wideLogs$FGM.y)
wideLogs$DRBP.y <- wideLogs$DREB.y/ (wideLogs$FGA.x - wideLogs$FGM.x)
winDRBP <- widelogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x) ]
library(r2d3)
library(tidyverse)
library(stringr)
library(ggplot2)
logs <- read_csv("all-game-logs.csv")
logs$Team <- str_sub(logs$MATCHUP,1, 3)
logsShort <- logs %>% select(-c(X1, W, L, W_PCT, MIN))
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
wideLogs$DRBP.x <- wideLogs$DREB.x/ (wideLogs$FGA.y - wideLogs$FGM.y)
wideLogs$DRBP.y <- wideLogs$DREB.y/ (wideLogs$FGA.x - wideLogs$FGM.x)
winDRBP <- wideLogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x) ]
winDRBP <- wideLogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x), ]
View(winDRBP)
?dim
nrow(wideLogs)/nrow(winDRBP)
nrow(winDRBP)/nrow(wideLogs)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
logs <- read_csv("all-game-logs.csv")
logs$Team <- str_sub(logs$MATCHUP,1, 3)
logsShort <- logs %>% select(-c(X1, W, L, W_PCT, MIN))
head(logsShort)
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
wideLogs$DRBP.x <- wideLogs$DREB.x/ (wideLogs$FGA.y - wideLogs$FGM.y)
wideLogs$DRBP.y <- wideLogs$DREB.y/ (wideLogs$FGA.x - wideLogs$FGM.x)
winDRBP <- wideLogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x), ]
nrow(winDRBP)/nrow(wideLogs)
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
wideLogs$DRBP.x <- wideLogs$DREB.x/ (wideLogs$FGA.y - wideLogs$FGM.y)
wideLogs$DRBP.y <- wideLogs$DREB.y/ (wideLogs$FGA.x - wideLogs$FGM.x)
winDRBP <- wideLogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x), ]
sprintf("Winning percentage and winning DREB percentage: %f ", nrow(winDRBP)/nrow(wideLogs))
firsts <- logsShort[!duplicated(logsShort$Game_ID),]
logsShort<- logsShort[seq(dim(logsShort)[1],1),]
seconds <- logsShort[!duplicated(logsShort$Game_ID),]
wideLogs <- merge(firsts,seconds, by = "Game_ID")
wideLogs$DRBP.x <- wideLogs$DREB.x/ (wideLogs$FGA.y - wideLogs$FGM.y)
wideLogs$DRBP.y <- wideLogs$DREB.y/ (wideLogs$FGA.x - wideLogs$FGM.x)
winDRBP <- wideLogs[(wideLogs$WL.x == "W" & wideLogs$DRBP.x > wideLogs$DRBP.y) | (wideLogs$WL.y == "W" & wideLogs$DRBP.y > wideLogs$DRBP.x), ]
sprintf("WinDRB%: %f ", nrow(winDRBP)/nrow(wideLogs))
sprintf("WinDRB\%: %f ", nrow(winDRBP)/nrow(wideLogs))
sprintf("WinDRBPercentage: %f ", nrow(winDRBP)/nrow(wideLogs))
library(shiny)
library(r2d3)
library(tidyverse)
library(stringr)
efg <- read.csv('cs-over-50-fga.csv')
namesdf <- efg %>% separate(PLAYER, c("First", "Last", "Suffix"), remove = FALSE, sep = " ") %>% arrange(Last)
teamsdf <- efg %>%  arrange(TEAM)
efg$FGM2 <- efg$FGM - efg$X3PM
efg$FGA2 <- efg$FGA - efg$X3PA
efg$FG2Percent <- efg$FGM2/ efg$FGA2
efg[is.na(efg)] <- 0
efg.pca <- prcomp(efg[,c(4:12,14:16)] ,center = TRUE,scale. = TRUE)
summary(efg.pca)
efg$isSelected <- TRUE
shots <- read.csv("shotcharts-2018-19.csv")
# pbp <- read.csv('jumpshots-11-25.csv')
# pbp$shotType <- "2PT"
# pbp$shotType[str_detect(pbp$HOMEDESCRIPTION, "3PT") | str_detect(pbp$VISITORDESCRIPTION, "3PT")]<- '3PT'
#
# pbp$shotOutcome <- "MAKE"
# pbp$shotOutcome[str_detect(pbp$HOMEDESCRIPTION, "MISS") | str_detect(pbp$VISITORDESCRIPTION, "MISS")]<- 'MISS'
# pbp <- pbp %>% unite(shotGroup, shotType,shotOutcome, sep = "-", remove = FALSE)
# pbp <- pbp %>% unite(desc_combined, HOMEDESCRIPTION,VISITORDESCRIPTION, sep = " ", remove = FALSE)
jumpshots <- shots %>% filter(ACTION_TYPE == "Jump Shot" & SHOT_DISTANCE < 40)
# pbp <- pbp %>% filter(!str_detect(desc_combined, "Running|Fadeway|Turnaround"))
# pbp$shotLength <- str_extract( pbp$desc_combined, "\\d+(?=\\')")
jumpShotshort <- jumpshots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
# pbpshort <- pbp %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME, shotType, shotOutcome, shotGroup, shotLength)
logs <- read.csv('all-game-logs.csv')
jumplogs <- merge(jumpShotshort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
# pbpLogShort <- pbplogs %>% select(PERIOD, PCTIMESTRING, desc_combined, SCORE, SCOREMARGIN,
#                            PLAYER1_NAME, PLAYER1_TEAM_ABBREVIATION, PLAYER1_TEAM_CITY, PLAYER1_TEAM_NICKNAME,
#                            shotType, shotOutcome, shotGroup, shotLength, GAME_DATE, MATCHUP, WL
#                            )
#
jumplogShort <- jumplogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
jumplogShort$HOMEAWAY <- "Away"
jumplogShort$HOMEAWAY[str_detect(jumplogShort$MATCHUP, "vs") ]<- "Home"
jumplogShort$OPPONENT <-str_sub(jumplogShort$MATCHUP,-3)
jumplogShort$DATE_OPPONENT <- paste(jumplogShort$GAME_DATE, str_sub(jumplogShort$MATCHUP,5), sep = " ")
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
write_csv(jumplogShort, "jump-log-short.csv")
write_csv(allLogShort, "all-log-short.csv")
runApp()
View(allShotShort)
runApp()
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19.csv")
View(shots)
grShots <- shots %>% group_by(PLAYER_ID, ACTION_TYPE)
grShots %>% summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),
FGM_TYPE = sum(SHOT_MADE_FLAG),
)
grShots %>% summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),
FGM_TYPE = sum(SHOT_MADE_FLAG)
)
grShots <- shots %>% group_by(PLAYER_ID, ACTION_TYPE)
grShots %>% summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),
FGM_TYPE = sum(SHOT_MADE_FLAG)
)
grShots <- shots %>% group_by(PLAYER_ID, ACTION_TYPE) %>% summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
View(grShots)
grShots <- shots %>% group_by(PLAYER_ID) %>% summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19.csv")
grShots <- shots %>%
group_by(PLAYER_ID) %>%
summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19.csv")
grShots <- shots %>%
group_by(PLAYER_ID) %>%
summarise_all(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19.csv")
grShots <- shots %>%
group_by(PLAYER_ID) %>%
summarise_all(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19.csv")
grShots <- shots %>%
group_by(PLAYER_ID) %>%
summarise(FGA_TYPE = sum(SHOT_ATTEMPTED_FLAG),FGM_TYPE = sum(SHOT_MADE_FLAG))
View(grShots)
