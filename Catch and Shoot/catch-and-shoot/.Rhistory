library("nbastatR")
warnings()
all_nba_players <-
get_nba_players_ids(league = "NBA",
active_only = T)
?get_nba_players
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
all_nba_players <- get_nba_players()
install.packages("bookdown")
shiny::runApp('Documents/data-analysis/nylon/Catch and Shoot/catch-and-shoot')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
setwd("~/Documents/data-analysis/nylon/Catch and Shoot/catch-and-shoot")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19-Dec-10-18.csv")
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,TEAM_NAME,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_ATTEMPTED_FLAG, SHOT_MADE_FLAG,SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
head(alShotShort)
shots <- read.csv("shotcharts-2018-19-Dec-10-18.csv")
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,TEAM_NAME,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_ATTEMPTED_FLAG, SHOT_MADE_FLAG,SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
head(allShotShort)
head(logs)
logs <- read.csv('all-game-logs.csv')
head(logs)
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,TEAM_NAME,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME,
EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_ATTEMPTED_FLAG, SHOT_MADE_FLAG,SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
allLogShort <- allLogShort %>% mutate(RANGE = ifelse(SHOT_DISTANCE < 4, "RIM",
ifelse(SHOT_DISTANCE >= 5 & SHOT_DISTANCE < 14, "SMR",
ifelse(SHOT_DISTANCE > 14 & SHOT_TYPE == "2PT Field Goal", "LMR",
ifelse(SHOT_DISTANCE >= 22 & SHOT_TYPE == "3PT Field Goal", "3PT", "LMR")))))
allLogShort <- allLogShort %>% mutate(SHOT_VALUE = ifelse(SHOT_TYPE == "3PT Field Goal", 3,2))
head(allLogShort)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
allLogShort$TEAM_ABRV <- substr(allLogShort$MATCHUP, 0, 3)
allLogShort <- allLogShort %>% mutate(RANGE = ifelse(SHOT_DISTANCE < 4, "RIM",
ifelse(SHOT_DISTANCE >= 5 & SHOT_DISTANCE < 14, "SMR",
ifelse(SHOT_DISTANCE > 14 & SHOT_TYPE == "2PT Field Goal", "LMR",
ifelse(SHOT_DISTANCE >= 22 & SHOT_TYPE == "3PT Field Goal", "3PT", "LMR")))))
allLogShort <- allLogShort %>% mutate(SHOT_VALUE = ifelse(SHOT_TYPE == "3PT Field Goal", 3,2))
head(allLogShort)
playerStatsByRange <- allLogShort %>% group_by(PLAYER_NAME, RANGE) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
FG_PERCENTAGE = FGM/FGA, PPS =sum(SHOT_MADE_FLAG * SHOT_VALUE/FGA),  PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE))
playerStats <- allLogShort %>% group_by(PLAYER_NAME) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE), EFG = PTS/(FGA*2), PPS = PTS/FGA)
teamStatsByRange <- allLogShort %>% group_by(TEAM_ABRV, RANGE) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
FG_PERCENTAGE = FGM/FGA, PPS =sum(SHOT_MADE_FLAG * SHOT_VALUE/FGA), PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE))
teamStats <- allLogShort %>% group_by(TEAM_ABRV) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE), EFG = PTS/(FGA*2), PPS = PTS/FGA)
playerStatsByRange <- playerStatsByRange %>% merge(playerStats, by = 'PLAYER_NAME', suffixes = c("_range","_total"))
head(playerStatsByRange)
teamStatsByRange <- teamStatsByRange %>% merge(teamStats, by = 'TEAM_ABRV', suffixes = c("_range","_total"))
head(teamStatsByRange)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(shotRangeRatio))
playerStatsByRange$shotRangeRatio <- playerStatsByRange$FGA_range/playerStatsByRange$FGA_total
teamStatsByRange$shotRangeRatio <- teamStatsByRange$FGA_range/teamStatsByRange$FGA_total
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(shotRangeRatio))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(shotRangeRatio))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR") %>% arrange(desc(shotRangeRatio))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(shotRangeRatio))
head(rimPlayer)
head(smrPlayer)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(shotRangeRatio))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(shotRangeRatio))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR") %>% arrange(desc(shotRangeRatio))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(shotRangeRatio))
head(rimPlayer)
head(smrPlayer)
head(lmrPlayer)
head(threePlayer)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(PPS_range))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(PPS_range))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(PPS_range))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(PPS_range))
head(rimPlayer)
head(smrPlayer)
head(lmrPlayer)
head(threePlayer)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
head(rimPlayer)
head(smrPlayer)
head(lmrPlayer)
head(threePlayer)
View(lmrPlayer)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(PPS_range))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(PPS_range))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(PPS_range))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(PPS_range))
head(rimPlayer, n=10L)
head(smrPlayer, n=10L)
head(lmrPlayer, n=10L)
head(threePlayer, n=10L)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
head(rimPlayer, n=10L)
head(smrPlayer, n=10L)
head(lmrPlayer, n=10L)
head(threePlayer, n=10L)
rimTeam <- teamStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(shotRangeRatio))
smrTeam <- teamStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(shotRangeRatio))
lmrTeam <- teamStatsByRange %>% filter(RANGE == "LMR") %>%  arrange(desc(shotRangeRatio))
threeTeam <- teamStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(shotRangeRatio))
head(rimTeam)
head(smrTeam)
head(lmrTeam)
head(threeTeam)
rimTeam <- teamStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(PPS_range))#desc(shotRangeRatio), desc(EFG))
smrTeam <- teamStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(PPS_range))#desc(shotRangeRatio), desc(EFG))
lmrTeam <- teamStatsByRange %>% filter(RANGE == "LMR") %>% arrange(desc(PPS_range))#shotRangeRatio), desc(EFG))
threeTeam <- teamStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(PPS_range))#shotRangeRatio), desc(EFG))
head(rimTeam)
head(smrTeam)
head(lmrTeam)
head(threeTeam)
allNBA <- teamStatsByRange %>% group_by(RANGE) %>% summarise(TEAM_ABRV = "All" ,FGA_range = sum(FGA_range), FGM_range = sum(FGM_range),
FG_PERCENTAGE = FGM_range/FGA_range,PTS_range = sum(PTS_range), EFG = mean(EFG),
FGM_total = sum(.$FGM_range), FGA_total = sum(.$FGA_range), PTS_total= sum(.$PTS_range),
PPS_range = PTS_range/FGA_range,shotRangeRatio = mean(shotRangeRatio),
PPS_total = sum(.$PTS_range)/sum(.$FGA_range))
head(allNBA)
teamStatsByRange <- rbind(teamStatsByRange, allNBA)
write_csv(teamStatsByRange,"longTeamByRange.csv")
write_csv(pbp,"all-log-short.csv")
teamStatsByRange <- rbind(teamStatsByRange, allNBA)
write_csv(teamStatsByRange,"longTeamByRange.csv")
write_csv(allLogShort,"all-log-short.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
shots <- read.csv("shotcharts-2018-19-Dec-10-18.csv")
allShotShort <- shots %>% select(GAME_ID, TEAM_ID,TEAM_NAME,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME, EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_ATTEMPTED_FLAG, SHOT_MADE_FLAG,SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM)
head(allShotShort)
logs <- read.csv('all-game-logs.csv')
head(logs)
alllogs <- merge(allShotShort,logs,by.x= c("GAME_ID", "TEAM_ID"),by.y=c("Game_ID","Team_ID"))
allLogShort <- alllogs %>% select(GAME_ID, TEAM_ID,TEAM_NAME,PERIOD, ACTION_TYPE,MINUTES_REMAINING, SECONDS_REMAINING, PLAYER_ID, PLAYER_NAME,
EVENT_TYPE, SHOT_TYPE, SHOT_ZONE_BASIC, SHOT_ZONE_AREA, SHOT_ZONE_RANGE,
SHOT_ATTEMPTED_FLAG, SHOT_MADE_FLAG,SHOT_DISTANCE, LOC_X, LOC_Y, HTM, VTM,GAME_DATE, MATCHUP, WL)
allLogShort$HOMEAWAY <- "Away"
allLogShort$HOMEAWAY[str_detect(allLogShort$MATCHUP, "vs") ]<- "Home"
allLogShort$OPPONENT <-str_sub(allLogShort$MATCHUP,-3)
allLogShort$DATE_OPPONENT <- paste(allLogShort$GAME_DATE, str_sub(allLogShort$MATCHUP,5), sep = " ")
allLogShort$TEAM_ABRV <- substr(allLogShort$MATCHUP, 0, 3)
allLogShort <- allLogShort %>% mutate(RANGE = ifelse(SHOT_DISTANCE < 4, "RIM",
ifelse(SHOT_DISTANCE >= 5 & SHOT_DISTANCE < 14, "SMR",
ifelse(SHOT_DISTANCE > 14 & SHOT_TYPE == "2PT Field Goal", "LMR",
ifelse(SHOT_DISTANCE >= 22 & SHOT_TYPE == "3PT Field Goal", "3PT", "LMR")))))
allLogShort <- allLogShort %>% mutate(SHOT_VALUE = ifelse(SHOT_TYPE == "3PT Field Goal", 3,2))
head(allLogShort)
playerStatsByRange <- allLogShort %>% group_by(PLAYER_NAME, RANGE) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
FG_PERCENTAGE = FGM/FGA, PPS =sum(SHOT_MADE_FLAG * SHOT_VALUE/FGA),  PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE))
playerStats <- allLogShort %>% group_by(PLAYER_NAME) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE), EFG = PTS/(FGA*2), PPS = PTS/FGA)
teamStatsByRange <- allLogShort %>% group_by(TEAM_ABRV, RANGE) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
FG_PERCENTAGE = FGM/FGA, PPS =sum(SHOT_MADE_FLAG * SHOT_VALUE/FGA), PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE))
teamStats <- allLogShort %>% group_by(TEAM_ABRV) %>% summarise(FGM = sum(SHOT_MADE_FLAG),FGA = sum(SHOT_ATTEMPTED_FLAG),
PTS  = sum(SHOT_MADE_FLAG * SHOT_VALUE), EFG = PTS/(FGA*2), PPS = PTS/FGA)
playerStatsByRange <- playerStatsByRange %>% merge(playerStats, by = 'PLAYER_NAME', suffixes = c("_range","_total"))
head(playerStatsByRange)
teamStatsByRange <- teamStatsByRange %>% merge(teamStats, by = 'TEAM_ABRV', suffixes = c("_range","_total"))
head(teamStatsByRange)
playerStatsByRange$shotRangeRatio <- playerStatsByRange$FGA_range/playerStatsByRange$FGA_total
teamStatsByRange$shotRangeRatio <- teamStatsByRange$FGA_range/teamStatsByRange$FGA_total
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(shotRangeRatio))
head(rimPlayer, n=10L)
head(smrPlayer, n=10L)
head(lmrPlayer, n=10L)
head(threePlayer, n=10L)
rimPlayer <- playerStatsByRange %>% filter(RANGE == "RIM" & FGA_range >20) %>% arrange(desc(PPS_range))
smrPlayer <- playerStatsByRange %>% filter(RANGE == "SMR" & FGA_range >20) %>% arrange(desc(PPS_range))
lmrPlayer <- playerStatsByRange %>% filter(RANGE == "LMR" & FGA_range >20) %>% arrange(desc(PPS_range))
threePlayer <- playerStatsByRange %>% filter(RANGE == "3PT" & FGA_range >20) %>% arrange(desc(PPS_range))
head(rimPlayer, n=10L)
head(smrPlayer, n=10L)
head(lmrPlayer, n=10L)
head(threePlayer, n=10L)
rimTeam <- teamStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(shotRangeRatio))
smrTeam <- teamStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(shotRangeRatio))
lmrTeam <- teamStatsByRange %>% filter(RANGE == "LMR") %>%  arrange(desc(shotRangeRatio))
threeTeam <- teamStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(shotRangeRatio))
head(rimTeam)
head(smrTeam)
head(lmrTeam)
head(threeTeam)
rimTeam <- teamStatsByRange %>% filter(RANGE == "RIM") %>% arrange(desc(PPS_range))#desc(shotRangeRatio), desc(EFG))
smrTeam <- teamStatsByRange %>% filter(RANGE == "SMR") %>% arrange(desc(PPS_range))#desc(shotRangeRatio), desc(EFG))
lmrTeam <- teamStatsByRange %>% filter(RANGE == "LMR") %>% arrange(desc(PPS_range))#shotRangeRatio), desc(EFG))
threeTeam <- teamStatsByRange %>% filter(RANGE == "3PT") %>% arrange(desc(PPS_range))#shotRangeRatio), desc(EFG))
head(rimTeam)
head(smrTeam)
head(lmrTeam)
head(threeTeam)
allNBA <- teamStatsByRange %>% group_by(RANGE) %>% summarise(TEAM_ABRV = "All" ,FGA_range = sum(FGA_range), FGM_range = sum(FGM_range),
FG_PERCENTAGE = FGM_range/FGA_range,PTS_range = sum(PTS_range), EFG = mean(EFG),
FGM_total = sum(.$FGM_range), FGA_total = sum(.$FGA_range), PTS_total= sum(.$PTS_range),
PPS_range = PTS_range/FGA_range,shotRangeRatio = mean(shotRangeRatio),
PPS_total = sum(.$PTS_range)/sum(.$FGA_range))
head(allNBA)
teamStatsByRange <- rbind(teamStatsByRange, allNBA)
write_csv(teamStatsByRange,"longTeamByRange.csv")
write_csv(allLogShort,"all-log-short.csv")
shiny::runApp()
runApp()
